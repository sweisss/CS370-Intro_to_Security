"""
Seth Weiss
weissse@oregonstate.edu
CS 370 - Intro to Security
Fall 2023
Programming Project 3  - OTP

Description:
./submission --generate-qr : This command should generate a jpg picture
or svg picture of the QR code that encodes the URI GA expects. URI contains
secret keys along with the user id required for the TOTP algorithm.

Refer to the following link which provides details about the format of URI
and how to add extra information in URI.
https://github.com/google/google-authenticator/wiki/Key-Uri-Format

[65pts]./submission --get-otp : This command should generate an OTP which must
match the OTP generated by the Google Authenticator for that 30 second period
and print it to the screen. Optionally, you can make the program run such that it
prints the OTP and then sleeps for 30 seconds and then again prints another OTP
and keeps on going forever.

Resources:
QR code library: https://github.com/lincolnloop/python-qrcode#examples
PyOTP: https://pyauth.github.io/pyotp/
"""
import sys
import io
import pyotp
import qrcode
import qrcode.image.svg
from qrcode.image.pure import PyPNGImage


SECRETS_FILE = '.secrets'
QR_PNG_FILENAME = 'qr_code.png'
QR_SVG_FILENAME = 'qr_code.svg'
USERNAME = 'Seth Weiss'
APP_NAME = 'Project 3 - OTP'
WRITE_QR_SVG = False
WRITE_QR_PNG = True
PRINT_QR_TO_CONSOLE = True
    
    
def print_usage():
    print("""Usage: otp [OPTION...]
          
    --generate-qr            generate a QR code that encodes what the URI GA expects
          
    --get-otp                generate an OTP which matches the OTP generated by the 
                                Google Authenticator for that 30 second period and
                                prints it to the screen
          
    -h, --help               give this help list""")


def print_qr(qr):
    """
    Takes a QR code and prints it to the console.
    """
    f = io.StringIO()
    qr.print_ascii(out=f)
    f.seek(0)
    print(f.read())


def write_qr_svg(qr):
    """
    Takes a QR code and writes/saves it to an SVG file
    """
    factory = qrcode.image.svg.SvgPathImage
    img = qr.make_image(image_factory=factory)
    img.save(QR_SVG_FILENAME, kind='SVG')


def write_qr_png(qr):
    """
    Takes a QR code and writes/saves it to a PNG file
    """
    img = qr.make_image()
    img.save(QR_PNG_FILENAME)


def generate_secret():
    """
    Generates a secret key used to constuct the QR code.
    Writes the secret key to a secrets file.
    """
    secret = pyotp.random_base32()
    with open(SECRETS_FILE, 'w') as f:
        f.write(secret)


def generate_uri():
    with open(SECRETS_FILE, 'r') as f:
        secret = f.read()
    uri = pyotp.totp.TOTP(secret).provisioning_uri(name=USERNAME, issuer_name=APP_NAME)
    return uri


def generate_qr():
    """
    Generates a QR code that encodes the URI Google Authenticator expects.
    """
    generate_secret()
    uri = generate_uri()
    data = uri
    qr = qrcode.QRCode()
    qr.add_data(data)
    print_qr(qr) if PRINT_QR_TO_CONSOLE else 0
    write_qr_svg(qr) if WRITE_QR_SVG else 0
    write_qr_png(qr) if WRITE_QR_PNG else 0


def get_otp():
    """
    Generates an OTP that matches the one in the Google Authenticator.
    Lasts for 30 seconds.
    """
    with open(SECRETS_FILE, 'r') as f:
        secret = f.read()
    totp = pyotp.TOTP(secret)
    print('Current OTP:', totp.now())
    

def main():
    usage_options = {
    '--generate-qr': generate_qr,
    '--get-otp': get_otp,
    '-h': print_usage,
    '--help': print_usage
    }
    
    if len(sys.argv) != 2:
        print_usage()

    else:
        flag = sys.argv[1]
        option = usage_options.get(flag, print_usage)
        option()


if __name__ == "__main__":
    main()
